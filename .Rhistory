1+1
help
help()
q()
myFunction <- Function()
myFunction <- Function(x)
a <- 1:100
message(a)
if(a==10){
"a is 10"
}else{
"0"
}
demo()
demo(Japanese)
nxt()
library("swirl")
swirl()
paste("Hello","world!",sep=" ")
L<- 1:3
paste(c("X","Y","Z"),L,sep="")
paste(L,c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1;4,sep="-")
paste(LETTERS,1:4,sep="-")
x <- c(44,NA,5,NA)
x*3
y <-rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z,100)
my_data <- sample(c(y,z,100))
my_data <- sample(c(y,z),100)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
print(my_na)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <-c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- C(4,5)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(1:20,nrow=4,ncol=5)
my_matrix2 <-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbinds(patients,my_matrix)
cbind(patients,my_matrix)
my_data <-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
?colnames
colnames(cnames)
colnames(my_data) <-cnames
my_data
TRUE ==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5 != 7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8 || 6 !=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
which(ints)
which(ints>7)
any(ints <0)
all(inst>0)
all(ints>0)
library("swirl")
swirl()
swirl()
Date()
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
save()
save(function())
?save
save(function)
boring_function <- function(x) {
x
}
save
submit()
boring_function('My first function!')
boring_function()
boring_function
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
my_mean <- function(my_vector) {
sum(my_vector)
length(my_vector)
}
my_mean <- function(my_vector) {
sum(my_vector)/
length(my_vector)
}
my_mean
my_mean(c(1,3,4))
submit()
my_mean <- function(my_vector) {
sum(my_vector)/
length(my_vector)
}
my_mean
my_mean(c(1,3,4))
submit()
submit(my_mean())
?submit
sum(my_vector)/
length(my_vector)}
my_mean(1,3,4)
my_mean(c(1,3,4)
my_mean(c(1,3,4))
my_mean <- function(y){
sum(y)/length(y)
}
submit()
my_mean(c(4,5,10))
remainder <- function(num,divisor=2){
num %% divisor
}
submit()
remainder <- function(num,divisor=2){
num %% divisor
}
submit()
remainder(5)
remainder(11,5)
remainder(diviso=11,num=5)
remainder(4,div=2)
args(remainder)
?func
evaluate <- function(func, dat){
# Write your code here!
# Remember: the last expression evaluated will be returned!
}
evaluate <- function(func, dat){
func(dat)
}
evaluate <- function(func, dat){
func(dat)
}
submit()
?div
?stdiv
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(y){y[1]},c(8,4,0))
x <- c(8,4,0)
function(x){x[length[x]]}
function(x){x[length[x]]}
evaluate(function(x){x[length[x]]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programing","is","fun")
paste("Programming","is","fun")
paste("Programming", "is", "fun!")
telegram <- function(...){
paste("START",...,"STOP")
}
submit()
telegram("I love you minik")
adjective <-args[["Beautiful"]]
mad_libs <- function(...){
place <- args[["Beograd"]]
adjective <-args[["Beautiful"]]
noun <- args[["Deer"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Beograd","Beautiful","Deer")
mad_libs("Beograd","Beautiful","Deer","Stevo")
mad_libs <- function(...){
place <- args[["Beograd"]]
adjective <-args[["Beautiful"]]
noun <- args[["Deer"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs <- function(...){
args<- list(...)
place <- args[["Beograd"]]
adjective <-args[["Beautiful"]]
noun <- args[["Deer"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs("Beograd","Beautiful","Deer")
mad_libs <- function(...){
args<- list(...)
place <- args[["place"]]
adjective <-args[["adjective"]]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("Beograd","Beautiful","Deer")
submit()
nxt()
submit()
next()
nxt()
submit()
mad_libs(place="Beograd",adjective="Smart",noun="Pero")
"%p%" <- function(left,right){paste(left,right)}
submit()
submit()
"I"%p%"love"%p%"R"
"I"%p%"love"%p%"R!"
library("swirl")
ls()
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lappy(unique_vals,function(elem)elem[2])
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
credit_data <- read.csv(file = 'cs-training.csv')
setwd("C:/Users/Strahinja/Desktop/books_Germany/R_Project/R_Project")
credit_data <- read.csv(file = 'cs-training.csv')
credit_data_dropped_number <- credit_data[, -1]
credit_data_cleaned_days_past<-credit_data_dropped_number[!(credit_data_dropped_number$NumberOfTime60.89DaysPastDueNotWorse > 95 | credit_data_dropped_number$NumberOfTime30.59DaysPastDueNotWorse > 95 | credit_data_dropped_number$NumberOfTimes90DaysLate > 95),]
credit_data_cleaned_days_past<- subset(credit_data_dropped_number, credit_data_dropped_number$NumberOfTime60.89DaysPastDueNotWorse < 95 )
credit_data_cleaned_Utilization<-subset( credit_data_cleaned_days_past, credit_data_cleaned_days_past$RevolvingUtilizationOfUnsecuredLines < 13)
credit_data_cleaned_age<-credit_data_cleaned_Utilization[!(credit_data_cleaned_Utilization$age <1),]
credit_data_cleaned_age<-credit_data_cleaned_age[!(credit_data_cleaned_age$age > 99),]
credit_data_cleaned_DebtRatio<-credit_data_cleaned_age[!(credit_data_cleaned_age$DebtRatio >3490),]
credit_data_cleaned_DebtRatio$MonthlyIncome[is.na(credit_data_cleaned_DebtRatio$MonthlyIncome)] <- median(credit_data_cleaned_DebtRatio$MonthlyIncome, na.rm=TRUE)
credit_data_cleaned_DebtRatio$NumberOfDependents[is.na(credit_data_cleaned_DebtRatio$NumberOfDependents)] <- 0
credit_data_cleaned <- credit_data_cleaned_DebtRatio
credit_data_cleaned_deskewed <- sqrt(credit_data_cleaned)
credit_data_cleaned_deskewed['IncomePerPerson'] = credit_data_cleaned_deskewed['MonthlyIncome']/(credit_data_cleaned_deskewed['NumberOfDependents']+1)
credit_data_cleaned_deskewed['MonthlyDebt'] = credit_data_cleaned_deskewed['DebtRatio']*credit_data_cleaned_deskewed['MonthlyIncome']
credit_data_cleaned_deskewed['NumOfOpenCreditLines'] = credit_data_cleaned_deskewed['NumberOfOpenCreditLinesAndLoans']-credit_data_cleaned_deskewed['NumberRealEstateLoansOrLines']
credit_data_cleaned_deskewed$SeriousDlqin2yrs <- as.factor(credit_data_cleaned_deskewed$SeriousDlqin2yrs)
library(ggplot2)
library(lattice)
library(caret)
install.packages("recipes", dependencies = TRUE)
library(caret)
# In R-studios we install the package only once. Once we install it we load it with library
# install.packages("broom", type="binary")
# install.packages("ggplot2")
# install.packages("Hmisc")
# install.packages("e1071")
# install.packages("blorr")
library("blorr")
library("broom")
library("ggplot2")
library("Hmisc")
library("e1071")
library("survival")
# install.packages("rms")
library("rms")
# install.packages("survival")
# install.packages("reprex")
library("tidyverse")
library("reprex")
# install.packages("dplyr")
library("dplyr")
# install.packages("tidyverse")
#install.packages("pROC")
library("pROC")
#install.packages("caret")
# install.packages("recipes")
library(recipes)
library("ROCR")
library("randomForest")
sample <- sample.int(n = nrow(credit_data_cleaned_deskewed), size = floor(.75*nrow(credit_data_cleaned_deskewed)), replace = F)
train <- credit_data_cleaned_deskewed[sample, ]
test  <- credit_data_cleaned_deskewed[-sample, ]
model <- glm(SeriousDlqin2yrs ~ ., data = train, family = binomial(link = 'logit'))
blr_regress(model)
colSums(is.na(credit_data_cleaned_deskewed))
blr_regress(model)
predictions <- predict(model, test, type="response") # Use to predict on test
model %>%
blr_gains_table() %>%
blr_roc_curve()
set.seed(1)
knnmodel <- train(SeriousDlqin2yrs~., data=train, method="knn", trControl=TControl)
